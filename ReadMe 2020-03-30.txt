DSA Coding Puzzle Assignment v.

Candidate:  Scott Vigil  svigil777@gmail.com

Build/Test Instructions:
Build and test were performed under the latest CygWin toolset.

Console example...

svigi@DESKTOP-P9H9KT8 /cygdrive/c/cygwin64/home/svigi/Proj/BusLogic
$ g++ -o BusLogic BusLogic.cpp

svigi@DESKTOP-P9H9KT8 /cygdrive/c/cygwin64/home/svigi/Proj/BusLogic
$ ./BusLogic.exe i4.txt
BusLogic 3/28/2020 22:42
Obstacle Detection State Machine
  obstruction center.. 48, left edge.., 41.2, right edge.., 54.8
  obstruction center.. 66.5, left edge.., 65, right edge.., 68

Status:  3/30/2020 15:50

I have realized the design. That is, I have implemented the design in code
form. In addition, I have written two test cases on a spread sheet that 
exercise all but two flows of the state machine. I have written an input test
file that supplies the inputs as documented in the test and watched in horror
as everything fell apart. lol

And, after suitable rest and recovery, I have come back, instrumented the 
code, observed it's internal states as it progressed through the test cases,
watched as sometimes the code did the wrong thing and sometimes the test
supplied the incorrect data for excercising the intended functionality.

In the end, the code, the drawing and the spreadsheet containing the test
cases are in agreement. Log files capture test case results.

Following items have also been completed.
o Class definitions needs to be refined. Choice between use of vectors or lists needs 
  more attention. 
o Algorithmic detail (aka business logic) needs to be realized in code.
o Design material and code needs to be saved into GIT.
o Design material needs to be written to assigned format.
o Questions asked about the code not addressed in these comments need to be answered.

Todo:
Complete Todo items...

Requirements:
    1.  An object shall be considered a collection of Nmin or more features 
        clustered together, not more than Nd (ten degrees) apart. 
        Default configuration follows:

        Nd = 10, Nmin = 4

        << Replaces... >>

        Configure expected Object size: OBJ_SIZE_MIN, OBJ_SIZE_MAX 

   2.   For {Theta: 0 <= Theta < 360}
                Scan feature points from text file, floating point values

   3.   Input text file shall be structured with a series of comma separated 
        floating point values, nominally formatted as...

            aaa.aaa,bbb.bbb,ccc.ccc,...

        Assume the file has <CR><LF> at the end.

   4.   Create a list of features, ListOfFeatures:   
            Attributes: PositionOnCircleDeg, PrevFeature, NextFeature
            Implementation: vector

   5.   Output a list of feature locations in units degrees to standard output.

        << replaces... >>

        Create a list of objects with center of arc object and boundaries, ListOfObjs: 
            Attributes: PositionOnCircleDeg, PrevObj, NextObj
            Implementation: vector

            Algorithm:    
                Initialize object count to zero.
                Set CurrentFeature = index 0.
                While current feature is valid.
                Label: New feature
                Initialize feature count to zero.
                Label: process a feature
                Repeat:
                   Is next feature within 10 degrees? If not, cycle as current 
                   feature is outlier. ObjectFound = false
                Else
                    Print the list of objects, PrintObjs

  Assumptions:
   1.   No feature crosses 360 degree boundary. This boundary is set at the 
        tail of the aircraft to minimize omission of an item of interest. For 
        craft not having a tail, assume that the 360 degree boundary is in 
        the direction opposite of intended travel.

   2.   Object size is between 20 and 30 degrees arc.  << Assumption removed. >>

   3.   A feature with an arc distance from an obstacle > 10 degrees is no a 
        part of that obstacle.

        << replaces... >>

        Objects are no closer than 20 degrees next to one another. There is no 
        overlap. 

   4.   And outlier feature is one that is greater than ten degrees of arc 
        from the next closest feature in an obstacle.

        << replaces... >>

        A feature > ½ sigma away from center of object is considered an outlier.        
        For simplicity, assume sigma is 10.
